//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IPeopleService")]
    public interface IPeopleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeopleService/Create", ReplyAction="http://tempuri.org/IPeopleService/CreateResponse")]
        int Create(Models.Person entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeopleService/Create", ReplyAction="http://tempuri.org/IPeopleService/CreateResponse")]
        System.Threading.Tasks.Task<int> CreateAsync(Models.Person entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeopleService/Read", ReplyAction="http://tempuri.org/IPeopleService/ReadResponse")]
        Models.Person Read(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeopleService/Read", ReplyAction="http://tempuri.org/IPeopleService/ReadResponse")]
        System.Threading.Tasks.Task<Models.Person> ReadAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeopleService/ReadAll", ReplyAction="http://tempuri.org/IPeopleService/ReadAllResponse")]
        Models.Person[] ReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeopleService/ReadAll", ReplyAction="http://tempuri.org/IPeopleService/ReadAllResponse")]
        System.Threading.Tasks.Task<Models.Person[]> ReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeopleService/Update", ReplyAction="http://tempuri.org/IPeopleService/UpdateResponse")]
        bool Update(int id, Models.Person entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeopleService/Update", ReplyAction="http://tempuri.org/IPeopleService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(int id, Models.Person entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeopleService/Delete", ReplyAction="http://tempuri.org/IPeopleService/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPeopleService/Delete", ReplyAction="http://tempuri.org/IPeopleService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPeopleServiceChannel : ConsoleApp.ServiceReference.IPeopleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PeopleServiceClient : System.ServiceModel.ClientBase<ConsoleApp.ServiceReference.IPeopleService>, ConsoleApp.ServiceReference.IPeopleService {
        
        public PeopleServiceClient() {
        }
        
        public PeopleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PeopleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PeopleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PeopleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Create(Models.Person entity) {
            return base.Channel.Create(entity);
        }
        
        public System.Threading.Tasks.Task<int> CreateAsync(Models.Person entity) {
            return base.Channel.CreateAsync(entity);
        }
        
        public Models.Person Read(int id) {
            return base.Channel.Read(id);
        }
        
        public System.Threading.Tasks.Task<Models.Person> ReadAsync(int id) {
            return base.Channel.ReadAsync(id);
        }
        
        public Models.Person[] ReadAll() {
            return base.Channel.ReadAll();
        }
        
        public System.Threading.Tasks.Task<Models.Person[]> ReadAllAsync() {
            return base.Channel.ReadAllAsync();
        }
        
        public bool Update(int id, Models.Person entity) {
            return base.Channel.Update(id, entity);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(int id, Models.Person entity) {
            return base.Channel.UpdateAsync(id, entity);
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
    }
}
